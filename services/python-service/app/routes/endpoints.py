from fastapi import Request, HTTPException
from app.core.a2a_workflow import debate_to_decide_workflow
from app.schema.workflow import LoanApplicationRequest, LoanDecisionResponse
import pickle
import os
from fastapi import APIRouter
import json 
import time
import uuid
import httpx
import asyncio
from pydantic import BaseModel
from typing import Optional, List, Dict, Any

# RAG Bot imports
from app.botagent.main_bot import get_rag_bot
# MCP function calling removed

router = APIRouter()

# Express service configuration
EXPRESS_SERVICE_URL = "http://localhost:3000"  # Express service URL

async def send_to_express(decision_result: dict, request_data: dict):
    """
    Send MAS decision result to Express service for database storage
    """
    try:
        payload = {
            "request_data": request_data,
            "mas_result": decision_result,
            "timestamp": time.time()
        }
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                f"{EXPRESS_SERVICE_URL}/api/v1/python/loan-decision",
                json=payload
            )
            
            if response.status_code == 200:
                print(f"‚úÖ Successfully sent to Express: {response.json()}")
                return True
            else:
                print(f"‚ùå Express service error: {response.status_code} - {response.text}")
                return False
                
    except httpx.TimeoutException:
        print("‚ùå Timeout connecting to Express service")
        return False
    except Exception as e:
        print(f"‚ùå Error sending to Express: {str(e)}")
        return False

@router.get("/health")
async def health_check():
    """
    Health check endpoint for the loan decision service
    """
    return {
        "status": "healthy",
        "service": "loan-decision-a2a",
        "version": "1.0.0",
        "timestamp": time.time(),
        "endpoints": [
            "/api/v1/health",
            "/api/v1/debate-loan", 
            "/api/v1/chat"
        ]
    }

@router.post("/debate-loan", response_model=LoanDecisionResponse)
async def debate_loan(request: LoanApplicationRequest):
    """
    Nh·∫≠n d·ªØ li·ªáu h·ªì s∆° theo schema m·ªõi, ch·∫°y workflow tranh lu·∫≠n agent v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ c√πng log c√°c v√≤ng tranh lu·∫≠n.
    
    This endpoint evaluates loan applications using a multi-agent debate system:
    1. Academic Agent: Evaluates academic potential and achievements
    2. Finance Agent: Analyzes financial risk and repayment capability  
    3. Critical Agent: Provides critical analysis and feedback
    4. Decision Agent: Makes final decision based on all inputs
    """
    start_time = time.time()
    request_id = str(uuid.uuid4())
    
    try:
        print(request)
        # T·∫°o profile text t·ª´ d·ªØ li·ªáu ƒë·∫ßu v√†o m·ªõi
        profile = (
            f"H·ªì s∆° sinh vi√™n vay v·ªën (ID: {request_id}):\n"
            f"- Th√¥ng tin c√° nh√¢n: {request.age} tu·ªïi, {request.gender}, nh√≥m tu·ªïi {request.age_group}, khu v·ª±c {request.province_region}\n"
            f"- Th√¥ng tin h·ªçc t·∫≠p: ƒê·∫°i h·ªçc tier {request.university_tier}, "
            f"{'tr∆∞·ªùng c√¥ng l·∫≠p' if request.public_university else 'tr∆∞·ªùng t∆∞ th·ª•c'}, ng√†nh {request.major_category}, "
            f"nƒÉm {request.study_year}, GPA chu·∫©n h√≥a: {request.gpa_normalized:.2f}/1.0\n"
            f"- Ho·∫°t ƒë·ªông ngo·∫°i kh√≥a: {request.club if request.club else 'Kh√¥ng tham gia CLB n√†o'}\n"
            f"- T√†i ch√≠nh gia ƒë√¨nh: Thu nh·∫≠p {request.family_income:,} VND/th√°ng\n"
            f"- T√¨nh h√¨nh c√° nh√¢n: {'C√≥ vi·ªác l√†m th√™m' if request.has_part_time_job else 'Kh√¥ng c√≥ vi·ªác l√†m th√™m'}, "
            f"{'ƒêang c√≥ n·ª£' if request.existing_debt else 'Kh√¥ng c√≥ n·ª£'}\n"
            f"- B·∫£o l√£nh: {request.guarantor if request.guarantor else 'Kh√¥ng c√≥'}\n"
            f"- Y√™u c·∫ßu vay: {request.loan_amount_requested:,} VND cho m·ª•c ƒë√≠ch '{request.loan_purpose}'"
        )
        
        print(f"\nüöÄ Processing loan application {request_id}")
        print(f"üìã Profile: {profile}")
        
        # Ch·∫°y workflow debate
        result = debate_to_decide_workflow(profile, return_log=True)
        
        # Calculate processing time
        processing_time = time.time() - start_time
        
        # Add request metadata to structured result
        result["request_metadata"] = {
            "request_id": request_id,
            "loan_amount": request.loan_amount_requested,
            "loan_purpose": request.loan_purpose,
            "gpa_normalized": request.gpa_normalized,
            "university_tier": request.university_tier,
            "public_university": request.public_university,
            "guarantor": request.guarantor,
            "family_income": request.family_income,
            "has_existing_debt": request.existing_debt,
            "age": request.age,
            "gender": request.gender,
            "major_category": request.major_category,
            "processing_time_seconds": round(processing_time, 2),
            "timestamp": time.time()
        }
        
        result["processing_time_seconds"] = round(processing_time, 2)
        result["request_id"] = request_id
        
        # Extract final decision for logging (compatible with new structure)
        final_decision = result.get("final_result", {}).get("decision", 
                                   result.get("responses", {}).get("final_decision", {}).get("decision", "unknown"))
        print(f"‚úÖ Decision: {final_decision} (took {processing_time:.2f}s)")
        
        # Send result to Express service for database storage (non-blocking)
        try:
            request_dict = request.dict()  # Convert Pydantic model to dict
            await send_to_express(result, request_dict)
        except Exception as e:
            # Don't fail the main request if Express communication fails
            print(f"‚ö†Ô∏è  Warning: Failed to send to Express service: {e}")
        
        return result
        
    except Exception as e:
        processing_time = time.time() - start_time
        error_msg = f"Workflow execution failed: {str(e)}"
        
        print(f"‚ùå Error processing {request_id}: {error_msg}")
        
        # Return structured error response (compatible with new schema)
        raise HTTPException(
            status_code=500,
            detail={
                "responses": {
                    "academic_repredict": None,
                    "finance_repredict": None,
                    "critical_academic": None,
                    "critical_finance": None,
                    "final_decision": {
                        "decision": "reject",
                        "reason": error_msg
                    }
                },
                "rule_based": {},
                "agent_status": {},
                "final_result": {
                    "decision": "reject",
                    "reason": error_msg,
                    "error": "workflow_execution_failed"
                },
                "request_metadata": {
                    "request_id": request_id,
                    "processing_time_seconds": round(processing_time, 2),
                    "timestamp": time.time()
                },
                "processing_time_seconds": round(processing_time, 2),
                "request_id": request_id
            }
        )


# ========================
# RAG BOT API - SINGLE ENDPOINT
# ========================

class ChatRequest(BaseModel):
    """Chat request for RAG bot with optional user context"""
    message: str
    citizen_id: Optional[str] = None  # Optional citizen_id for database queries

@router.post("/chat")
async def chat_rag_bot(request: ChatRequest):
    """
    RAG Chat Bot - T·ª± ƒë·ªông quy·∫øt ƒë·ªãnh chi·∫øn l∆∞·ª£c tr·∫£ l·ªùi v·ªõi h·ªó tr·ª£ MCP
    
    Bot s·∫Ω t·ª± ƒë·ªông ph√¢n lo·∫°i c√¢u h·ªèi v√† ch·ªçn chi·∫øn l∆∞·ª£c ph√π h·ª£p:
    - Direct Answer: C√¢u h·ªèi ch√†o h·ªèi, c·∫£m ∆°n, th√¥ng tin chung
    - Call Data DB: C√¢u h·ªèi v·ªÅ th√¥ng tin c√° nh√¢n t·ª´ database (c·∫ßn citizen_id)
    - Personal General: C√¢u h·ªèi c√° nh√¢n kh√°c - h∆∞·ªõng d·∫´n ƒëƒÉng nh·∫≠p 
    - RAG Search: C√¢u h·ªèi c·∫ßn t√¨m ki·∫øm t√†i li·ªáu
    
    V√≠ d·ª• c√¢u h·ªèi:
    - "Xin ch√†o" ‚Üí Tr·∫£ l·ªùi tr·ª±c ti·∫øp
    - "ƒêi·ªÉm GPA c·ªßa t√¥i l√† bao nhi·ªÅu?" ‚Üí Truy v·∫•n MCP (c·∫ßn citizen_id)
    - "T√¥i c√≥ th·ªÉ vay bao nhi·ªÅu?" ‚Üí H∆∞·ªõng d·∫´n ƒëƒÉng nh·∫≠p
    - "Quy tr√¨nh vay v·ªën nh∆∞ th·∫ø n√†o?" ‚Üí T√¨m ki·∫øm t√†i li·ªáu (RAG)
    
    Request body:
    - message: C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
    - citizen_id: (Optional) ID ƒë·ªãnh danh ƒë·ªÉ truy c·∫≠p d·ªØ li·ªáu c√° nh√¢n
    
    Example requests:
    1. General question: {"message": "Vay v·ªën sinh vi√™n l√† g√¨?"}
    2. Database question: {"message": "GPA c·ªßa t√¥i l√† bao nhi·ªÅu?", "citizen_id": "075204000105"}
    3. Personal question: {"message": "T√¥i c√≥ th·ªÉ vay bao nhi·ªÅu?"}
    """
    start_time = time.time()
    
    try:
        # Get bot instance
        bot = get_rag_bot()
        print(request)
        # Chat with optional user context
        result = await bot.chat(
            message=request.message,
            citizen_id=request.citizen_id
        )
        
        return {
            "question": request.message,
            "answer": result.get("response", "Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi"),
            "sources": result.get("sources", []),
            "strategy": result.get("source", "unknown"),
            "requires_login": result.get("requires_login", False),
            "processing_time": round(time.time() - start_time, 2),
            "suggestion": result.get("suggestion", ""),
            
            # Enhanced debug info
            "debug_info": {
                "classification": result.get("source", "unknown"),
                "user_context_available": request.citizen_id is not None,
                "citizen_id_provided": request.citizen_id,
                "response_type": result.get("source", "unknown")
            }
        }
        
    except Exception as e:
        print(f"‚ùå Enhanced chat error: {e}")
        return {
            "question": request.message,
            "answer": f"Xin l·ªói, t√¥i g·∫∑p l·ªói: {str(e)}",
            "sources": [],
            "strategy": "error",
            "processing_time": round(time.time() - start_time, 2),
            "error": str(e)
        }


# ===== END OF RAG BOT ENDPOINTS =====

# MCP functionality has been removed
# Only basic RAG chat is available


