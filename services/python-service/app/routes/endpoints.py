from fastapi import Request, HTTPException
from app.core.a2a_workflow import debate_to_decide_workflow
import pickle
import os
from fastapi import APIRouter
import json 
from pydantic import BaseModel, Field, validator
from typing import Optional
import time
import uuid

router = APIRouter()

class LoanApplicationRequest(BaseModel):
    """
    Updated model based on dataset schema (excluding student_id, national_id, province)
    """
    # Demographics
    age_group: str = Field(..., description="Nh√≥m tu·ªïi", example="18-22")
    age: int = Field(..., ge=16, le=30, description="Tu·ªïi sinh vi√™n", example=20)
    gender: str = Field(..., description="Gi·ªõi t√≠nh", example="Nam")
    province_region: str = Field(..., description="Mi·ªÅn (B·∫Øc/Trung/Nam)", example="B·∫Øc")
    
    # Academic Info
    university_tier: int = Field(..., ge=1, le=5, description="X·∫øp h·∫°ng ƒë·∫°i h·ªçc (1-5)", example=1)
    major_category: str = Field(..., description="Nh√≥m ng√†nh h·ªçc", example="STEM")
    gpa_normalized: float = Field(..., ge=0.0, le=1.0, description="ƒêi·ªÉm trung b√¨nh chu·∫©n h√≥a (0-1)", example=0.85)
    study_year: int = Field(..., ge=1, le=6, description="NƒÉm h·ªçc hi·ªán t·∫°i", example=3)
    club: Optional[str] = Field(None, description="C√¢u l·∫°c b·ªô ƒëang tham gia", example="C√¢u l·∫°c b·ªô IT")
    
    # Financial Info
    family_income: int = Field(..., ge=0, description="Thu nh·∫≠p h·ªô gia ƒë√¨nh (VND/th√°ng)", example=15000000)
    has_part_time_job: bool = Field(..., description="C√≥ vi·ªác l√†m th√™m", example=True)
    existing_debt: bool = Field(..., description="C√≥ n·ª£ hi·ªán t·∫°i", example=False)
    
    # Loan Request
    loan_amount_requested: int = Field(..., ge=1000000, le=500000000, description="S·ªë ti·ªÅn ƒë·ªÅ ngh·ªã vay (VND)", example=50000000)
    loan_purpose: str = Field(..., description="M·ª•c ƒë√≠ch vay", example="H·ªçc ph√≠")
    
    @validator('gender')
    def validate_gender(cls, v):
        valid_genders = ['Nam', 'N·ªØ', 'Kh√°c']
        if v not in valid_genders:
            raise ValueError(f'Gender must be one of: {valid_genders}')
        return v
    
    @validator('province_region')
    def validate_province_region(cls, v):
        valid_regions = ['B·∫Øc', 'Trung', 'Nam']
        if v not in valid_regions:
            raise ValueError(f'Province region must be one of: {valid_regions}')
        return v

class LoanDecisionResponse(BaseModel):
    """Response model for loan decision"""
    decision: str = Field(..., description="Decision result: approve or reject")
    reason: str = Field(..., description="Detailed reasoning for the decision")
    request_metadata: dict = Field(..., description="Metadata about the request")
    logs: list = Field(..., description="Detailed conversation logs from agent workflow")
    processing_time_seconds: float = Field(..., description="Time taken to process the request")
    request_id: str = Field(..., description="Unique identifier for this request")

@router.get("/health")
async def health_check():
    """
    Health check endpoint for the loan decision service
    """
    return {
        "status": "healthy",
        "service": "loan-decision-a2a",
        "version": "1.0.0",
        "timestamp": time.time(),
        "endpoints": [
            "/api/v1/debate-loan",
            "/api/v1/health",
            "/api/v1/example-request"
        ]
    }


@router.post("/debate-loan", response_model=LoanDecisionResponse)
async def debate_loan(request: LoanApplicationRequest):
    """
    Nh·∫≠n d·ªØ li·ªáu h·ªì s∆° theo schema m·ªõi, ch·∫°y workflow tranh lu·∫≠n agent v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ c√πng log c√°c v√≤ng tranh lu·∫≠n.
    
    This endpoint evaluates loan applications using a multi-agent debate system:
    1. Academic Agent: Evaluates academic potential and achievements
    2. Finance Agent: Analyzes financial risk and repayment capability  
    3. Critical Agent: Provides critical analysis and feedback
    4. Decision Agent: Makes final decision based on all inputs
    """
    start_time = time.time()
    request_id = str(uuid.uuid4())
    
    try:
        # T·∫°o profile text t·ª´ d·ªØ li·ªáu ƒë·∫ßu v√†o m·ªõi
        profile = (
            f"H·ªì s∆° sinh vi√™n vay v·ªën (ID: {request_id}):\n"
            f"- Th√¥ng tin c√° nh√¢n: {request.age} tu·ªïi, {request.gender}, nh√≥m tu·ªïi {request.age_group}, khu v·ª±c {request.province_region}\n"
            f"- Th√¥ng tin h·ªçc t·∫≠p: ƒê·∫°i h·ªçc tier {request.university_tier}, ng√†nh {request.major_category}, "
            f"nƒÉm {request.study_year}, GPA chu·∫©n h√≥a: {request.gpa_normalized:.2f}/1.0\n"
            f"- Ho·∫°t ƒë·ªông ngo·∫°i kh√≥a: {request.club if request.club else 'Kh√¥ng tham gia CLB n√†o'}\n"
            f"- T√†i ch√≠nh gia ƒë√¨nh: Thu nh·∫≠p {request.family_income:,} VND/th√°ng\n"
            f"- T√¨nh h√¨nh c√° nh√¢n: {'C√≥ vi·ªác l√†m th√™m' if request.has_part_time_job else 'Kh√¥ng c√≥ vi·ªác l√†m th√™m'}, "
            f"{'ƒêang c√≥ n·ª£' if request.existing_debt else 'Kh√¥ng c√≥ n·ª£'}\n"
            f"- Y√™u c·∫ßu vay: {request.loan_amount_requested:,} VND cho m·ª•c ƒë√≠ch '{request.loan_purpose}'"
        )
        
        print(f"\nüöÄ Processing loan application {request_id}")
        print(f"üìã Profile: {profile}")
        
        # Ch·∫°y workflow debate
        result = debate_to_decide_workflow(profile, return_log=True)
        
        # Calculate processing time
        processing_time = time.time() - start_time
        
        # Add request metadata to result
        result["request_metadata"] = {
            "request_id": request_id,
            "loan_amount": request.loan_amount_requested,
            "loan_purpose": request.loan_purpose,
            "gpa_normalized": request.gpa_normalized,
            "university_tier": request.university_tier,
            "family_income": request.family_income,
            "has_existing_debt": request.existing_debt,
            "age": request.age,
            "gender": request.gender,
            "major_category": request.major_category,
            "processing_time_seconds": round(processing_time, 2),
            "timestamp": time.time()
        }
        
        result["processing_time_seconds"] = round(processing_time, 2)
        result["request_id"] = request_id
        
        print(f"‚úÖ Decision: {result.get('decision', 'unknown')} (took {processing_time:.2f}s)")
        
        return result
        
    except Exception as e:
        processing_time = time.time() - start_time
        error_msg = f"Workflow execution failed: {str(e)}"
        
        print(f"‚ùå Error processing {request_id}: {error_msg}")
        
        # Return structured error response
        raise HTTPException(
            status_code=500,
            detail={
                "error": "workflow_execution_failed",
                "message": error_msg,
                "request_id": request_id,
                "processing_time_seconds": round(processing_time, 2),
                "timestamp": time.time()
            }
        )


