# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from . import chatbot_pb2

class ChatbotServiceStub(object):
    """Chatbot service definition"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Chat = channel.unary_unary(
                '/chatbot.ChatbotService/Chat',
                request_serializer=lambda x: x.SerializeToString() if hasattr(x, 'SerializeToString') else str(x).encode(),
                response_deserializer=lambda x: x if isinstance(x, chatbot_pb2.ChatResponse) else chatbot_pb2.ChatResponse(),
                )

class ChatbotServiceServicer(object):
    """Chatbot service definition"""

    def Chat(self, request, context):
        """Send a chat message and get response"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_ChatbotServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=lambda x: chatbot_pb2.ChatRequest(),
                    response_serializer=lambda x: str(x).encode() if hasattr(x, '__dict__') else x,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chatbot.ChatbotService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))