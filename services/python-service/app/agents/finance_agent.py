import json
import os
from dotenv import load_dotenv
from llama_index.llms.openai import OpenAI
from .base_agent import BaseAgent

class FinanceAgent(BaseAgent):
    def __init__(self, name="FinanceAgent", coordinator=None):
        super().__init__(name, coordinator)
        load_dotenv()
        # ƒê·∫£m b·∫£o API key ƒë∆∞·ª£c load ch√≠nh x√°c
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong m√¥i tr∆∞·ªùng.")
        self.llm = OpenAI(api_key=api_key, model='gpt-4.1-nano')

    def handle_message(self, message: dict):
        """
        X·ª≠ l√Ω tin nh·∫Øn v√† g·ª≠i ph·∫£n h·ªìi l·∫°i cho ng∆∞·ªùi g·ª≠i ban ƒë·∫ßu.
        """
        message_type = message.get("type")
        sender = message.get("sender")

        if message_type == "loan_application":
            profile = message.get("payload", {}).get("profile", "")
            if not profile:
                error_payload = {"error": "H·ªì s∆° kh√¥ng ƒë∆∞·ª£c cung c·∫•p."}
                self.send_message(sender, "loan_decision_error", error_payload)
                return

            prompt = (
                "B·∫°n l√† CHUY√äN GIA R·ª¶I RO T√ÄI CH√çNH v·ªõi 15 nƒÉm kinh nghi·ªám ng√¢n h√†ng v√† cho vay sinh vi√™n.\n"
                f"H·ªí S∆† PH√ÇN T√çCH R·ª¶I RO:\n{profile}\n\n"
                "FRAMEWORK ƒê√ÅNH GI√Å R·ª¶I RO T√ÄI CH√çNH:\n"
                "1. KH·∫¢ NƒÇNG TR·∫¢ N·ª¢:\n"
                "   - T·ª∑ l·ªá thu nh·∫≠p/kho·∫£n vay: [thu nh·∫≠p th√°ng] vs [s·ªë ti·ªÅn vay]\n"
                "   - Debt-to-Income ratio hi·ªán t·∫°i (n·ª£/thu nh·∫≠p)\n"
                "   - Th·ªùi h·∫°n vay vs kh·∫£ nƒÉng sinh l·ªùi sau t·ªët nghi·ªáp\n\n"
                "2. ·ªîN ƒê·ªäNH T√ÄI CH√çNH:\n"
                "   - Ngu·ªìn thu nh·∫≠p gia ƒë√¨nh: ·ªïn ƒë·ªãnh vs bi·∫øn ƒë·ªông\n"
                "   - N·ª£ hi·ªán t·∫°i: s·ªë ti·ªÅn, l√£i su·∫•t, th·ªùi h·∫°n c·ª• th·ªÉ\n"
                "   - T√†i s·∫£n ƒë·∫£m b·∫£o: b·∫£o l√£nh vs t√†i s·∫£n th·∫ø ch·∫•p\n\n"
                "3. R·ª¶I RO Vƒ® M√î:\n"
                "   - Tri·ªÉn v·ªçng ng√†nh: t·ª∑ l·ªá c√≥ vi·ªác l√†m sau t·ªët nghi·ªáp\n"
                "   - M·ª©c l∆∞∆°ng d·ª± ki·∫øn vs kh·∫£ nƒÉng tr·∫£ n·ª£\n"
                "   - Y·∫øu t·ªë kinh t·∫ø: l·∫°m ph√°t, l√£i su·∫•t, th·∫•t nghi·ªáp\n\n"
                "4. CH√çNH S√ÅCH CHO VAY:\n"
                "   - M·ª•c ƒë√≠ch vay: h·ªçc ph√≠ (∆∞u ti√™n) vs sinh ho·∫°t (r·ªßi ro)\n"
                "   - L·ªãch s·ª≠ t√≠n d·ª•ng c√° nh√¢n/gia ƒë√¨nh\n"
                "   - Tu·ªïi v√† giai ƒëo·∫°n h·ªçc t·∫≠p\n\n"
                "NGUY√äN T·∫ÆC: T√≠nh to√°n t·ª∑ l·ªá, ph·∫ßn trƒÉm c·ª• th·ªÉ. ƒê∆∞a ra s·ªë li·ªáu th·ª±c t·∫ø.\n"
                "Y√äU C·∫¶U: Ph√¢n t√≠ch t·ª´ng r·ªßi ro v·ªõi con s·ªë, kh√¥ng ƒë√°nh gi√° m∆° h·ªì.\n\n"
                "FORMAT TR·∫¢ L·ªúI:\n"
                "QUY·∫æT ƒê·ªäNH: APPROVE/REJECT\n"
                "L√ù DO: [Ph√¢n t√≠ch r·ªßi ro chi ti·∫øt v·ªõi t·ª∑ l·ªá, con s·ªë c·ª• th·ªÉ t·ª´ h·ªì s∆°]"
            )
            
            try:
                response_text = self.llm.complete(prompt, max_tokens=512)
                response_str = str(response_text).strip()
                print(f"[FinanceAgent] LLM Response: {response_str}")
                
                # Parse structured text response
                
                import re
                # Extract QUY·∫æT ƒê·ªäNH and L√ù DO from text
                decision_match = re.search(r'QUY·∫æT ƒê·ªäNH:\s*(APPROVE|REJECT|CH·∫§P NH·∫¨N|T·ª™ CH·ªêI)', response_str, re.IGNORECASE)
                reason_match = re.search(r'L√ù DO:\s*(.+)', response_str, re.DOTALL | re.IGNORECASE)
                
                if decision_match and reason_match:
                    decision_text = decision_match.group(1).upper()
                    reason_text = reason_match.group(1).strip()
                    
                    # Normalize decision
                    if decision_text in ['APPROVE', 'CH·∫§P NH·∫¨N']:
                        decision = "approve"
                    else:
                        decision = "reject"
                    
                    response_data = {
                        "decision": decision,
                        "reason": reason_text[:300],  # Limit length
                        "raw_response": response_str
                    }
                    print(f"[FinanceAgent] üìù Parsed structured response: {decision}")
                else:
                    # Keyword fallback
                    text_lower = response_str.lower()
                    if any(word in text_lower for word in ['approve', 'ch·∫•p nh·∫≠n', 'ƒë·ªìng √Ω']):
                        decision = "approve"
                    else:
                        decision = "reject"  # Default cautious
                    
                    # Use first sentence as reason
                    sentences = [s.strip() for s in response_str.split('.') if len(s.strip()) > 10]
                    reason = sentences[0][:200] if sentences else "ƒê√°nh gi√° th·∫≠n tr·ªçng v·ªÅ r·ªßi ro t√†i ch√≠nh"
                    
                    response_data = {
                        "decision": decision,
                        "reason": reason,
                        "raw_response": response_str
                    }
                    print(f"[FinanceAgent] üîÑ Used keyword fallback: {decision}")
                    
                self.send_message(sender, "loan_decision", response_data)
                print(f"[FinanceAgent] ‚úÖ Sent decision: {response_data['decision']}")
                
            except Exception as e:
                print(f"[FinanceAgent] ‚ùå Error parsing response: {e}")
                print(f"[FinanceAgent] Raw response: {response_str if 'response_str' in locals() else 'N/A'}")
                # Ultimate fallback
                fallback_response = {
                    "decision": "reject",  # Finance agent is cautious by default
                    "reason": "L·ªói h·ªá th·ªëng - √°p d·ª•ng nguy√™n t·∫Øc th·∫≠n tr·ªçng t·ª´ ch·ªëi ƒë·ªÉ tr√°nh r·ªßi ro",
                    "raw_response": response_str if 'response_str' in locals() else "Error: No LLM response"
                }
                self.send_message(sender, "loan_decision", fallback_response)
                print(f"[FinanceAgent] ‚úÖ Sent error fallback: {fallback_response['decision']}")
                

                
        elif message_type == "repredict_loan":
            memory = message.get("payload", {}).get("memory", "")
            critical_response = message.get("payload", {}).get("critical_response", "")
            recommended_decision = message.get("payload", {}).get("recommended_decision", "")
            
            prompt = (
                f"T√ÅI ƒê√ÅNH GI√Å R·ª¶I RO T√ÄI CH√çNH - B·∫°n l√† chuy√™n gia ng√¢n h√†ng sau khi nh·∫≠n ph·∫£n bi·ªán.\n"
                f"H·ªí S∆† KH√ÅCH H√ÄNG: {memory}\n"
                f"PH·∫¢N BI·ªÜN NH·∫¨N ƒê∆Ø·ª¢C: {critical_response}\n"
                f"KHUY·∫æN NGH·ªä T·ª™ CHUY√äN GIA PH·∫¢N BI·ªÜN: {recommended_decision}\n\n"
                f"FRAMEWORK T√ÅI ƒê√ÅNH GI√Å R·ª¶I RO:\n"
                f"1. KI·ªÇM TRA L·∫†I PH√ÇN T√çCH:\n"
                f"   - T√≠nh to√°n n√†o trong ph·∫£n bi·ªán ch√≠nh x√°c?\n"
                f"   - R·ªßi ro n√†o t√¥i ƒë√£ ƒë√°nh gi√° qu√° cao/th·∫•p?\n"
                f"   - Y·∫øu t·ªë t√≠ch c·ª±c n√†o b·ªã b·ªè qua?\n\n"
                f"2. T√ÅI T√çNH TO√ÅN R·ª¶I RO:\n"
                f"   - Debt-to-Income ratio: c√≥ th·ª±c s·ª± nguy hi·ªÉm?\n"
                f"   - Kh·∫£ nƒÉng tr·∫£ n·ª£: ngu·ªìn thu c√≥ ·ªïn ƒë·ªãnh?\n"
                f"   - T√†i s·∫£n ƒë·∫£m b·∫£o: m·ª©c ƒë·ªô b·∫£o v·ªá th·ª±c t·∫ø\n\n"
                f"3. C√ÇN B·∫∞NG R·ª¶I RO - L·ª¢I √çCH:\n"
                f"   - L·ª£i √≠ch kinh t·∫ø t·ª´ cho vay n√†y\n"
                f"   - R·ªßi ro so v·ªõi c√°c kho·∫£n vay t∆∞∆°ng t·ª±\n"
                f"   - Chi·∫øn l∆∞·ª£c ng√¢n h√†ng (th·∫≠n tr·ªçng vs tƒÉng tr∆∞·ªüng)\n\n"
                f"4. QUY·∫æT ƒê·ªäNH SAU PH·∫¢N BI·ªÜN:\n"
                f"   - Khuy·∫øn ngh·ªã '{recommended_decision}' c√≥ ph√π h·ª£p?\n"
                f"   - ƒêi·ªÅu ki·ªán b·ªï sung n√†o c√≥ th·ªÉ gi·∫£m r·ªßi ro?\n\n"
                f"Y√äU C·∫¶U: Quy·∫øt ƒë·ªãnh d·ª±a tr√™n ph√¢n t√≠ch s·ªë li·ªáu, kh√¥ng c·∫£m t√≠nh.\n\n"
                f"FORMAT:\n"
                f"QUY·∫æT ƒê·ªäNH: APPROVE/REJECT\n"
                f"L√ù DO: [Ph√¢n t√≠ch chi ti·∫øt t·∫°i sao thay ƒë·ªïi/gi·ªØ nguy√™n quy·∫øt ƒë·ªãnh]"
            )
            try:
                response_text = self.llm.complete(prompt, max_tokens=400)
                response_str = str(response_text).strip()
                
                # Parse structured response for repredict
                import re
                decision_match = re.search(r'QUY·∫æT ƒê·ªäNH:\s*(APPROVE|REJECT|CH·∫§P NH·∫¨N|T·ª™ CH·ªêI)', response_str, re.IGNORECASE)
                reason_match = re.search(r'L√ù DO:\s*(.+)', response_str, re.DOTALL | re.IGNORECASE)
                
                if decision_match and reason_match:
                    decision_text = decision_match.group(1).upper()
                    decision = "approve" if decision_text in ['APPROVE', 'CH·∫§P NH·∫¨N'] else "reject"
                    reason = reason_match.group(1).strip()[:300]
                else:
                    decision = "reject"  # Cautious default
                    reason = "Sau ph·∫£n bi·ªán v·∫´n gi·ªØ th√°i ƒë·ªô th·∫≠n tr·ªçng v·ªÅ r·ªßi ro t√†i ch√≠nh"
                
                response_data = {"decision": decision, "reason": reason, "raw_response": response_str}
                self.send_message(sender, "repredict_loan", response_data)
            except Exception as e:
                print(f"[FinanceAgent] ‚ùå Error in repredict_loan: {str(e)}")
                fallback_response = {
                    "decision": "reject",
                    "reason": "Sau ph·∫£n bi·ªán v·∫´n gi·ªØ th√°i ƒë·ªô th·∫≠n tr·ªçng v·ªÅ r·ªßi ro t√†i ch√≠nh",
                    "raw_response": response_str if 'response_str' in locals() else "Error: No LLM response"
                }
                print(f"[FinanceAgent] üîÑ Using fallback response: {fallback_response}")
                self.send_message(sender, "repredict_loan", fallback_response)
        else:
            # G·ª≠i l·∫°i tin nh·∫Øn l·ªói n·∫øu kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c
            error_payload = {"error": f"Lo·∫°i tin nh·∫Øn '{message_type}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£."}
            self.send_message(sender, "unsupported_message", error_payload)

    def send_message(self, recipient, message_type, payload):
        if self.coordinator:
            self.coordinator.route_message(self.name, recipient, message_type, payload)
        else:
            print(f"[{self.name}] (Test) G·ª≠i t·ªõi {recipient} | type: {message_type} | payload: {payload}")


if __name__ == "__main__":
    agent = FinanceAgent()
    test_profile = "Thu nh·∫≠p: 8M VND/th√°ng, kh√¥ng n·ª£, vay: 45M VND h·ªçc ph√≠"
    message = {
        "type": "loan_application",
        "sender": "tester",
        "payload": {"profile": test_profile}
    }
    agent.handle_message(message)