import json
import os
from dotenv import load_dotenv
from llama_index.llms.openai import OpenAI
from .base_agent import BaseAgent

class FinanceAgent(BaseAgent):
    def __init__(self, name="FinanceAgent", coordinator=None):
        super().__init__(name, coordinator)
        load_dotenv()
        # ƒê·∫£m b·∫£o API key ƒë∆∞·ª£c load ch√≠nh x√°c
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong m√¥i tr∆∞·ªùng.")
        self.llm = OpenAI(api_key=api_key, model='gpt-4.1-nano')

    def handle_message(self, message: dict):
        """
        X·ª≠ l√Ω tin nh·∫Øn v√† g·ª≠i ph·∫£n h·ªìi l·∫°i cho ng∆∞·ªùi g·ª≠i ban ƒë·∫ßu.
        """
        message_type = message.get("type")
        sender = message.get("sender")

        if message_type == "loan_application":
            profile = message.get("payload", {}).get("profile", "")
            if not profile:
                error_payload = {"error": "H·ªì s∆° kh√¥ng ƒë∆∞·ª£c cung c·∫•p."}
                self.send_message(sender, "loan_decision_error", error_payload)
                return

            prompt = (
                "B·∫°n l√† chuy√™n gia t√†i ch√≠nh TH·∫¨N TR·ªåNG ƒë√°nh gi√° r·ªßi ro cho vay.\n"
                f"H·ªí S∆†:\n{profile}\n\n"
                "ƒê√ÅNH GI√Å TH·∫¨N TR·ªåNG:\n"
                "- Thu nh·∫≠p th·∫•p = r·ªßi ro cao\n"
                "- C√≥ n·ª£ hi·ªán t·∫°i = r·ªßi ro r·∫•t cao\n"
                "- Vi·ªác l√†m th√™m = ƒëi·ªÉm c·ªông tr√°ch nhi·ªám\n"
                "- M·ª•c ƒë√≠ch h·ªçc ph√≠ = h·ª£p l√Ω h∆°n sinh ho·∫°t\n"
                "- T·∫≠p trung b·∫£o v·ªá t√†i s·∫£n, tr√°nh bad debt\n\n"
                "Y√äU C·∫¶U: Tr·∫£ l·ªùi theo format sau (kh√¥ng th√™m g√¨ kh√°c):\n"
                "QUY·∫æT ƒê·ªäNH: REJECT\n"
                "L√ù DO: [l√Ω do th·∫≠n tr·ªçng chi ti·∫øt]"
            )
            
            try:
                response_text = self.llm.complete(prompt, max_tokens=256)
                response_str = str(response_text).strip()
                print(f"[FinanceAgent] LLM Response: {response_str}")
                
                # Parse structured text response
                
                import re
                # Extract QUY·∫æT ƒê·ªäNH and L√ù DO from text
                decision_match = re.search(r'QUY·∫æT ƒê·ªäNH:\s*(APPROVE|REJECT|CH·∫§P NH·∫¨N|T·ª™ CH·ªêI)', response_str, re.IGNORECASE)
                reason_match = re.search(r'L√ù DO:\s*(.+)', response_str, re.DOTALL | re.IGNORECASE)
                
                if decision_match and reason_match:
                    decision_text = decision_match.group(1).upper()
                    reason_text = reason_match.group(1).strip()
                    
                    # Normalize decision
                    if decision_text in ['APPROVE', 'CH·∫§P NH·∫¨N']:
                        decision = "approve"
                    else:
                        decision = "reject"
                    
                    response_data = {
                        "decision": decision,
                        "reason": reason_text[:300]  # Limit length
                    }
                    print(f"[FinanceAgent] üìù Parsed structured response: {decision}")
                else:
                    # Keyword fallback
                    text_lower = response_str.lower()
                    if any(word in text_lower for word in ['approve', 'ch·∫•p nh·∫≠n', 'ƒë·ªìng √Ω']):
                        decision = "approve"
                    else:
                        decision = "reject"  # Default cautious
                    
                    # Use first sentence as reason
                    sentences = [s.strip() for s in response_str.split('.') if len(s.strip()) > 10]
                    reason = sentences[0][:200] if sentences else "ƒê√°nh gi√° th·∫≠n tr·ªçng v·ªÅ r·ªßi ro t√†i ch√≠nh"
                    
                    response_data = {
                        "decision": decision,
                        "reason": reason
                    }
                    print(f"[FinanceAgent] üîÑ Used keyword fallback: {decision}")
                    
                self.send_message(sender, "loan_decision", response_data)
                print(f"[FinanceAgent] ‚úÖ Sent decision: {response_data['decision']}")
                
            except Exception as e:
                print(f"[FinanceAgent] ‚ùå Error parsing response: {e}")
                print(f"[FinanceAgent] Raw response: {response_str if 'response_str' in locals() else 'N/A'}")
                # Ultimate fallback
                fallback_response = {
                    "decision": "reject",  # Finance agent is cautious by default
                    "reason": "L·ªói h·ªá th·ªëng - √°p d·ª•ng nguy√™n t·∫Øc th·∫≠n tr·ªçng t·ª´ ch·ªëi ƒë·ªÉ tr√°nh r·ªßi ro"
                }
                self.send_message(sender, "loan_decision", fallback_response)
                print(f"[FinanceAgent] ‚úÖ Sent error fallback: {fallback_response['decision']}")
                

                
        elif message_type == "repredict_loan":
            memory = message.get("payload", {}).get("memory", "")
            critical_response = message.get("payload", {}).get("critical_response", "")
            recommended_decision = message.get("payload", {}).get("recommended_decision", "")
            
            prompt = (
                f"T√ÅI ƒê√ÅNH GI√Å t√†i ch√≠nh sau ph·∫£n bi·ªán t·ª´ Critical Agent:\n"
                f"Ph·∫£n bi·ªán: {critical_response}\n"
                f"Khuy·∫øn ngh·ªã t·ª´ Critical Agent: {recommended_decision}\n\n"
                f"H∆Ø·ªöNG D·∫™N:\n"
                f"- Xem x√©t k·ªπ ph·∫£n bi·ªán v√† khuy·∫øn ngh·ªã c·ªßa Critical Agent\n"
                f"- ƒêi·ªÅu ch·ªânh quy·∫øt ƒë·ªãnh n·∫øu ph·∫£n bi·ªán c√≥ c∆° s·ªü\n"
                f"- Gi·ªØ th√°i ƒë·ªô th·∫≠n tr·ªçng nh∆∞ng c√¥ng b·∫±ng h∆°n\n"
                f"- N·∫øu Critical Agent khuy·∫øn ngh·ªã '{recommended_decision}', h√£y c√¢n nh·∫Øc nghi√™m t√∫c\n\n"
                'Y√äU C·∫¶U: Tr·∫£ l·ªùi theo format sau:\n'
                'QUY·∫æT ƒê·ªäNH: APPROVE/REJECT\n'
                'L√ù DO: [l√Ω do t√°i ƒë√°nh gi√° sau khi xem x√©t ph·∫£n bi·ªán]'
            )
            try:
                response_text = self.llm.complete(prompt, max_tokens=256)
                response_str = str(response_text).strip()
                
                # Parse structured response for repredict
                import re
                decision_match = re.search(r'QUY·∫æT ƒê·ªäNH:\s*(APPROVE|REJECT|CH·∫§P NH·∫¨N|T·ª™ CH·ªêI)', response_str, re.IGNORECASE)
                reason_match = re.search(r'L√ù DO:\s*(.+)', response_str, re.DOTALL | re.IGNORECASE)
                
                if decision_match and reason_match:
                    decision_text = decision_match.group(1).upper()
                    decision = "approve" if decision_text in ['APPROVE', 'CH·∫§P NH·∫¨N'] else "reject"
                    reason = reason_match.group(1).strip()[:300]
                else:
                    decision = "reject"  # Cautious default
                    reason = "Sau ph·∫£n bi·ªán v·∫´n gi·ªØ th√°i ƒë·ªô th·∫≠n tr·ªçng v·ªÅ r·ªßi ro t√†i ch√≠nh"
                
                response_data = {"decision": decision, "reason": reason}
                self.send_message(sender, "repredict_loan", response_data)
            except Exception as e:
                print(f"[FinanceAgent] ‚ùå Error in repredict_loan: {str(e)}")
                fallback_response = {
                    "decision": "reject",
                    "reason": "Sau ph·∫£n bi·ªán v·∫´n gi·ªØ th√°i ƒë·ªô th·∫≠n tr·ªçng v·ªÅ r·ªßi ro t√†i ch√≠nh"
                }
                print(f"[FinanceAgent] üîÑ Using fallback response: {fallback_response}")
                self.send_message(sender, "repredict_loan", fallback_response)
        else:
            # G·ª≠i l·∫°i tin nh·∫Øn l·ªói n·∫øu kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c
            error_payload = {"error": f"Lo·∫°i tin nh·∫Øn '{message_type}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£."}
            self.send_message(sender, "unsupported_message", error_payload)

    def send_message(self, recipient, message_type, payload):
        if self.coordinator:
            self.coordinator.route_message(self.name, recipient, message_type, payload)
        else:
            print(f"[{self.name}] (Test) G·ª≠i t·ªõi {recipient} | type: {message_type} | payload: {payload}")


if __name__ == "__main__":
    agent = FinanceAgent()
    test_profile = "Thu nh·∫≠p: 8M VND/th√°ng, kh√¥ng n·ª£, vay: 45M VND h·ªçc ph√≠"
    message = {
        "type": "loan_application",
        "sender": "tester",
        "payload": {"profile": test_profile}
    }
    agent.handle_message(message)